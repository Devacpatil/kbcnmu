 List and Dictionary with its important function (minimum 3)  RUN
#list and dictionary at least three function
lst = [1,23,3]
lst.reverse()
print(lst)
lst.sort()
print(lst)
lst.clear()
print(lst)
dst = {"Name":"chetan","Age":22,"Class":"M.C.A."}
print(dst)
dst.pop("Age")
print(dst)
mylst = dst.copy()
print(mylst)
dst.clear()
print(dst)


Program to find out factorial using recursion 			RUN
#Factorial Using Recursion:

def factorial(n):
    if (n == 1 or n == 0):
        return 1
    else:
        return (n * factorial(n - 1))

num = int(input("Enter the number: "))
print("number : ", num)
print("Factorial : ", factorial(num))





Program to find out a factorial of given number.   RUN
#factorial of given number
num = int(input("enter the number"))
fact = 1
ans = 0
i = 1
while(i<=num):
 fact = fact * i
 i = i + 1
else:
 ans = fact
print("factorial",ans)



Program to find out the given number is palindrome or not	RUN
#Palindrome Number:
num = int(input("Enter a Number:"))
temp = num
rev = 0
while(num>0):
    dig = num % 10
    rev = rev* 10 + dig
    num = num // 10
if(temp==rev):
    print("The number is Palindrome")
else:
    print("Number is Not a Palindrome")



Program to find out the given string is palindrome or not.  RUN
Palindrome String:
def isPalindrome(s):
    return s == s[::-1]
s = input("Enter a string: ")
ans=isPalindrome(s)
if ans:
    print("The string is Palindrome")
else:
    print("Tne string is not Palindrome")



Program for data structure algorithm using python for sorting    RUN
#bubbleSort		
def bubbleSort(arr):
    n=len(arr)
    for i in range(n-1):
        for j in range(0,n-i-1):
            if arr[j]>arr[j+1]:
                arr[j],arr[j+1]=arr[j+1],arr[j]
data=[2,11,5,15,23]
print (data)
bubbleSort(data)
print("Sorted array is:")
print(data)




Python program for linear search    RUN
#linear search 
lst = [18,2,89,23,9,20]
ele = int(input())
x = -1
for i in range(1,len(lst)):
     if lst[i]==ele:
         print("FOUND AT",i)
if ele not in lst:
     print("not found")


Program to demonstrate class, object, Inheritance.   RUN
#class object inheritance
class myclass:
     def fun(self):
        print("inside myclass")
class mysubclass(myclass):
     def sms(self):
        print("inside subclass")
m = mysubclass()
m.sms()
m.fun()




Program to find out the given number is Armstrong or not.    RUN
#Armstrong Number:
def is_armstrong(num):
    num_str = str(num)
    n = len(num_str)                  [ 153 AMSTRONG NUMBER ]
    sum = 0
    for digit in num_str:
        sum = sum+ int(digit)**n
    if sum == num:
        return ("The number is Armstrong")
    else:
        return ("The number is not Armstrong")
num=int(input("Enter the number: "))
print(is_armstrong(num))




Program to find out the given number is prime or not    RUN
#prime number
num = int(input())
rev = 0
c = 0                       [PRIME NO 5,7,11]
i = 1
while(i<=num):
     if(num%i==0):
         c = c + 1
     i = i + 1
if c==2:
     print("prime")
else:
     print("not prime")





#odd even number upto given number    RUN
r = int(input())
print("even numbers")
for i in range(2,r+1,2):
     print(i)
print("odd numbers")
for j in range(1,r+1,2):
     print(j)





#addition of add number up to given range  run
r = int(input("ENTER THE NUMBER"))
s = 0
for i in range (1,r+1,2):
     s = s + i
print("ADDITION",s)

#addition of even number up to given range	run
r = int(input("ENTER THE NUMBER"))
s = 0
for i in range(2,r+2,2):
     s = s + i
print("ADDITION",s)




#Fibonacci Program:   RUN
def Fibonacci(n):
    if n < 0:
        print("Please enter correct input!!")
    elif n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        return Fibonacci(n - 1)+ Fibonacci(n - 2)
n=int(input("Enter The Number: "))
for i in range(0,n+1):
    print(Fibonacci(i))

