//1.Write a program to implement Simple Linear Regression Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv('student_scores.csv')

dataset.describe()

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

X_train.shape

X_test

y_pred = regressor.predict(X_test)

y_pred

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

regressor.score(X_test,y_test)



//2  Write a program to implement Multiple Linear Regression Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv('house_data.csv')

dataset.shape

X = dataset.iloc[:, [5]].values

y = dataset.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

y

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

y_pred

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

regressor.score(X_test,y_test)


//3  Write a program to implement Logistic Regression Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20,
random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)

y_pred

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))


//4 Write a program to implement Decision Tress Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20,
random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
classifier= DecisionTreeClassifier(criterion='entropy', random_state=0)
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)

y_pred

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))



//5 Write a program to implement Support Vector Machine(SVM) Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20,
random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.svm import SVC 
classifier = SVC(kernel='linear', random_state=0)
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)

y_pred

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))



//6 Write a program to implement KNN Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20,
random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)

y_pred

from sklearn.metrics import classification_report,confusion_matrix
cm= confusion_matrix(y_test, y_pred)
cm

print(classification_report(y_test, y_pred))



//7 Write a program to implement Naive Bayes Classifier Using Python

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20,
random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)

y_pred

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))













1}
1)simple linear Regression usin python
2)find sse,ssr,sst using linear Regression

import pandas as pd
import numpy as np

from sklearn.datasets import load_iris
data=load_iris()

x=data.data
y=data.target

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
from sklearn.linear_model import LinearRegression

sc=LinearRegression()
sc.fit(x_train,y_train)

ypred=sc.predict(x_test)
print("score",sc.score(x_test,y_test))

sse=np.sum((y_test-ypred)**2)
ssr=np.sum((ypred-y.mean())**2)
sst=sse+ssr

print("sse =",sse)
print("ssr= ",ssr)
print("sst= ",sst)

2}
3)implement Decision tree using iris dataset
4) implement precision,recall,f1-score of decision tree
22)implement confusion matrix,accuracy score using decision tree 

import pandas as pd
import numpy as np

from sklearn.datasets import load_iris
data=load_iris()

x=data.data
y=data.target

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.tree import DecisionTreeClassifier
sc=DecisionTreeClassifier(criterion='entropy')
sc.fit(x_train,y_train)

y_pred=sc.predict(x_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test,y_pred))
print("Accuracy score",accuracy_score(y_test,y_pred))
print(" classification report",classification_report(y_test,y_pred))





3}
7) knn using iris dataset
8) find accuracy score and confusion matrix  of knn
10) demonstrate precision,recall,f1-score of knn
11) correct and wrong prediction and accuracy of knn

import pandas as pd
import numpy as np

from sklearn.datasets import load_iris
data=load_iris()

x=data.data
y=data.target

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
xtrain=sc_x.fit_transform(x_train)
xtest=sc_x.transform(x_test)

from sklearn.neighbors import KNeighborsClassifier
sc=KNeighborsClassifier(n_neighbors=5)
sc.fit(xtrain,y_train)

y_pred=sc.predict(x_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test,y_pred))
print("Accuracy score",accuracy_score(y_test,y_pred))
print(" classification report",classification_report(y_test,y_pred))






4}
12) print correct and wrong prediction and print accuracy of na誰ve bayes classifier model
13) implement na誰ve bayes  classification using iris dataset
14) Print Precision,recall,F1-score of na誰ve bayes classification model
15) Demonstrate Accuracy and confusion matrix of na誰ve bayes classification

import pandas as pd
import numpy as np

from sklearn.datasets import load_iris
data=load_iris()

x=data.data
y=data.target

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
xtrain=sc_x.fit_transform(x_train)
xtest=sc_x.transform(x_test)

from sklearn.naive_bayes import GaussianNB
sc= GaussianNB()
sc.fit(xtrain,y_train)

y_pred=sc.predict(x_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test,y_pred))
print("Accuracy score",accuracy_score(y_test,y_pred))
print(" classification report",classification_report(y_test,y_pred))






5}
21) implement  decision tree using breast cancer dataset

import pandas as pd
import numpy as np

from sklearn.datasets import load_breast_cancer
data=load_breast_cancer()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data.data[:,0:9],data.target,test_size=0.3,random_state=42)

from sklearn.tree import DecisionTreeClassifier
sc=DecisionTreeClassifier(criterion='entropy')
sc.fit(x_train,y_train)

y_pred=sc.predict(x_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test,y_pred))
print("Accuracy score",accuracy_score(y_test,y_pred))
print(" classification report",classification_report(y_test,y_pred))






6}
24) Implement knn   to classify breast cancer dataset

import pandas as pd
import numpy as np

from sklearn.datasets import load_breast_cancer
data=load_breast_cancer()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data.data[:,0:9],data.target,test_size=0.3,random_state=42)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
xtrain=sc.fit_transform(x_train)
xtest=sc.transform(x_test)

from sklearn.neighbors import KNeighborsClassifier
sc_x=KNeighborsClassifier(n_neighbors=5)
sc_x.fit(x_train,y_train)

y_pred=sc_x.predict(x_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test,y_pred))
print("Accuracy score",accuracy_score(y_test,y_pred))
print(" classification report",classification_report(y_test,y_pred))



7}
25) implement na誰ve bayes classifier to classify breast cancer dataset

import pandas as pd
import numpy as np

from sklearn.datasets import load_breast_cancer
data=load_breast_cancer()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data.data[:,0:9],data.target,test_size=0.3,random_state=42)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
xtrain=sc.fit_transform(x_train)
xtest=sc.transform(x_test)

from sklearn.naive_bayes import GaussianNB
sc_x=GaussianNB()
sc_x.fit(x_train,y_train)
y_pred = sc_x.predict(xtest)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test,y_pred))
print("Accuracy score",accuracy_score(y_test,y_pred))
print(" classification report",classification_report(y_test,y_pred))







8}
19)write a program to implement multivariable linear regression and find sse,ssr,sst

import pandas as pd
import numpy as np

data=pd.read_csv("abc.csv")
x=data.iloc[:,:-1].values
y=data.iloc[:,2].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

from sklearn.linear_model import LinearRegression
sc=LinearRegression()
sc.fit(x_train,y_train)

ypred=sc.predict(x_test)

print("score",sc.score(x_test,y_test))
sse=np.sum((y_test-ypred)**2)
ssr=np.sum((ypred-y.mean())**2)
sst=sse+ssr

print("sse =",sse)
print("ssr= ",ssr)
print("sst= ",sst)





9}
18) Implement Fuzzy  c mean clustering technique

import pandas as pd
import numpy as np
import skfuzzy as f
np.random.seed(0)
data=np.random.rand(100,2)
nc=3
cnt,u,u0,d,jm,p,fpc=f.cluster.cmeans(data.T,nc,2,error=0.005,maxiter=10)
clm=np.argmax(u,axis=0)
print("cluster center : ",cnt)
print("cluster membership:",clm)


